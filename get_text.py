import io
import os
from google.cloud import vision
from dotenv import load_dotenv
import openai
import json

# Nastav√≠me promƒõnnou prost≈ôed√≠ k API kl√≠ƒçi
load_dotenv()
# image_path = r"C:\Users\m000xz009726\OneDrive\Programov√°n√≠\Library_reader\library_reader\kniha3.jpg"        # jen testovac√≠, pozdƒõji zru≈°it

# Debugging environment√°ln√≠ promƒõnn√© pro Google Cloud Vision API Credentials
credentials_path = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
if not credentials_path:
    print("‚ùå GOOGLE_APPLICATION_CREDENTIALS is not set.")
elif not os.path.exists(credentials_path):
    print(f"‚ùå File not found: {credentials_path}")
else:
    print(f"‚úÖ Credentials file found: {credentials_path}")
    
# Debugging environment variable for OpenAI API key
openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    print("‚ùå OPENAI_API_KEY is not set.")
else:
    print("‚úÖ OPENAI_API_KEY is set.")    
    
       
def detect_text_from_file(image):
    try:
        client = vision.ImageAnnotatorClient()

        # Pokud je to objekt PIL.Image (nap≈ô. z Pillow), p≈ôevedeme ho do bytes
        if hasattr(image, 'save'):
            image_bytes = io.BytesIO()
            image.save(image_bytes, format='JPEG')  # nebo 'PNG', podle form√°tu
            content = image_bytes.getvalue()
        elif isinstance(image, str):
            # Jinak oƒçek√°v√°me cestu k souboru
            with io.open(image, 'rb') as file:
                content = file.read()
        else:
            raise ValueError("Neplatn√Ω typ vstupu ‚Äì oƒçek√°v√°n obr√°zek nebo cesta k souboru.")

        vision_image = vision.Image(content=content)
        response = client.text_detection(image=vision_image)
        texts = response.text_annotations

        if texts:
            return texts[0].description
        else:
            return "Nebyly rozpozn√°ny ≈æ√°dn√© texty."
    except Exception as e:
        print(f"‚ùå Error in Vision API: {e}")
        return "Error in Vision API"


# client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))  # - p≈Øvodn√≠, zmƒõnilo se knihovna import openai
MOCK_MODE = False # P≈ôep√≠naƒç: True = testovac√≠ re≈æim bez vol√°n√≠ API
# image_path = r"C:\Users\m000xz009726\OneDrive\Programov√°n√≠\Library_reader\library_reader\kniha3.jpg"  - # u≈æivatel nahraje jpg p≈ôes formul√°≈ô, tak≈æe se nepou≈æ√≠v√°. Ale funguje

# PROMPT pro OpenAI (co se m√° d√≠t)
prompt_system = (
    "You are an expert in Czech and world literature. "
    "You will be given a raw OCR-like text with book titles and author names. "
    "Be very careful: sometimes the author's name and book title are on the same line without a newline, "
    "and sometimes they are split over multiple lines. "
    "Each book must have exactly one author. An author always has a first name and a last name; "
    "some names may contain multiple parts. "
    "Your task is to extract all books and their authors from the text. "
    "Return the result strictly as a JSON array of objects with the keys 'title' and 'author'. "
    "Do not include explanations or extra text. "
    "Capitalize names and titles according to the rules for titles and names."
    "If you are unsure of the author or title, don't make it up. Use 'Unknown' instead."
    "Output only valid JSON, for example:\n"
    "[\n"
    "  {\"title\": \"1984\", \"author\": \"George Orwell\"},\n"
    "  {\"title\": \"≈†ikm√Ω kostel, t≈ôet√≠ d√≠l\", \"author\": \"Karin Lednick√°\"},\n"
    "  {\"title\": \"Sport je bolest\", \"author\": \"Michal Novotn√Ω\"},\n"
    "  {\"title\": \"Zimn√≠ mo≈ôe\", \"author\": \"Susanna Kearsleyov√°\"}\n"
    "  {\"title\": \"≈Ωena, kterou jsem byla\", \"author\": \"Kerry Fisherov√°\"}\n"
    "  {\"title\": \"Ateli√©r Rosen\", \"author\": \"Anne Jacobsov√°\"}\n"
    "  {\"title\": \"Hlubok√° mod≈ô mo≈ôe\", \"author\": \"Marie Lamballe\"}\n"   
    "]" )

def get_books_and_authors(text): 
    # ===== MOCK MODE ===== - jen testovac√≠, ≈°et≈ô√≠ se tokeny
    if MOCK_MODE:
        print("üß™ MOCK_MODE aktivn√≠ ‚Äì vol√°n√≠ API se simuluje.")
        response_data =[
                {"title": "Nesnesiteln√° lehkost byt√≠", "author": "Milan Kundera"},
                {"title": "1984", "author": "George Orwell"},
                {"title": "Harry Potter a K√°men mudrc≈Ø", "author": "J.K. Rowlingov√°"}      ]

    # ===== RE√ÅLN√â API VOL√ÅN√ç =====
    else:
        try: 
            print("üîÑ Pos√≠l√°m dotaz na OpenAI...")
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": prompt_system},
                    {"role": "user", "content": text}
                ],
                temperature=0.2
            )
            assistent_response = response.choices[0].message.content
            print("‚úÖ Odpovƒõƒè z OpenAI:")
            print(assistent_response)

            response_data = json.loads(assistent_response)   # s t√≠mto budeme d√°le pracovat - nap≈ô do db !!!
            return(response_data)
        
        except Exception as e:
            print("‚ùå Chyba p≈ôi vol√°n√≠ OpenAI API:")
            print(e)
            response_data = []
            
    return(response_data)

    # # ===== V√ùSTUP =====              # PAK P≈òEP√ç≈†U DO CYKLU V ≈†ABLONƒö
    # print("\nüìö Rozpoznan√© knihy:")
    # for book in response_data:
    #     print(f" {book['title']} - {book['author']}")


# get_books_and_authors(image_path) VOL√Å SE V APP.PY